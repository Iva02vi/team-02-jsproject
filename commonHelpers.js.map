{"version":3,"file":"commonHelpers.js","sources":["../src/js/favorites.js"],"sourcesContent":["import { openModalWindEx } from './modal-window-exercise';\n\nconst exercisesNotFound = document.querySelector(\n  '.favorites-page-items-not-found'\n);\nconst exercisesGallery = document.querySelector(\n  '.favorites-page-items-gallery'\n);\nconst mobilePagination = document.querySelector('.favorites-mobile-pagination');\n\nconst svgArrowUrl = new URL('/img/sprite.svg#icon-arrow', import.meta.url);\nconst KEY = 'favorites';\nconst storageFetch = localStorage.getItem(KEY);\nconst savedInStorageExercises = JSON.parse(storageFetch);\n\nconst limitPerPage = 8;\nlet currentPage = 1;\nlet lastIdx = currentPage * limitPerPage;\nlet firstIdx = lastIdx - limitPerPage;\nlet markup = '';\nlet newStorageFetch;\nlet actualExercisesList;\nlet paginationButtons;\nlet totalPages = Math.ceil(savedInStorageExercises.length / limitPerPage);\n\nconsole.log('totalPages: ', totalPages);\nconsole.log('savedInStorageExercises.length:', savedInStorageExercises.length);\n\nfunction hideElem(elem) {\n  elem.style.display = 'none';\n}\nfunction showElem(elem) {\n  elem.style.display = 'flex';\n}\n\nif (window.innerWidth < 768) {\n  showElem(mobilePagination);\n}\nfunction renderExerciseCards(arr) {\n  exercisesGallery.innerHTML = '';\n  const galleryItems = arr.reduce(\n    (html, card) =>\n      html +\n      `<li class=\"gallery-list-item\">\n                <div class=\"workout-box\">\n                    <div class=\"workout-header\">\n                        <div class=\"workout-header-wrap\">\n                            <span class=\"workout-title\">WORKOUT</span>\n                            <button type=\"button\" class=\"delete-workout-btn\" id=\"${card._id}\">                            \n                                <svg class=\"trash-icon\" id=\"${card._id}\" width=\"16\" height=\"16\" aria-label=\"trash-icon\">\n                                  <use href=\"./img/sprite.svg#icon-trash\" id=\"${card._id}\"></use>\n                                </svg>\n                            </button>\n                        </div>\n                        <div class=\"start-button-wrap\">\n                            <button type=\"button\" class=\"start-button\" id=${card._id}>Start\n                                <svg class=\"start-arrow-icon\" id=${card._id} width=\"14\" height=\"14\" aria-label=\"start-arrow\">\n                                  <use href=${svgArrowUrl}></use>\n                                </svg>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"workout-type\">\n                        <svg class=\"run-man-icon\" width=\"24\" height=\"24\" aria-label=\"run-man\">\n                            <use href=\"./img/sprite.svg#icon-lighticon\"></use>\n                        </svg>\n                        <h3 class=\"workout-name\">${card.name}</h3>\n                    </div>\n                    <div class=\"workout-description\">\n                        <p class=\"description-item-name\">Burned calories:\n                            <span class=\"description-item-value\">${card.burnedCalories} / ${card.time} min</span>\n                        </p>\n                        <p class=\"description-item-name\">Body part:\n                            <span class=\"description-item-value\">${card.bodyPart}</span>\n                        </p>\n                        <p class=\"description-item-name\">Target:\n                            <span class=\"description-item-value\">${card.target}</span>\n                        </p>\n                    </div>\n                </div>\n            </li>`,\n    ''\n  );\n  exercisesGallery.innerHTML = galleryItems;\n}\n\nif (storageFetch === null || savedInStorageExercises.length === 0) {\n  hideElem(exercisesGallery);\n} else {\n  hideElem(exercisesNotFound);\n  renderExerciseCards(savedInStorageExercises);\n}\n\nexercisesGallery.addEventListener('click', async event => {\n  let id;\n  const clickedButton = event.target;\n  console.log(clickedButton);\n  if (clickedButton && clickedButton.closest('.start-button')) {\n    id = clickedButton.closest('.start-button').getAttribute('id');\n    await openModalWindEx(id);\n  }\n});\n\nif (window.innerWidth < 768) {\n  markup = '';\n  mobilePagination.innerHTML = '';\n  for (let i = 1; i <= totalPages; i++) {\n    if (i === 1) {\n      markup += `\n        <li>\n          <button class=\"favorites-pagination-button fav-active-page\" type=\"button\" id=\"${i}\">${i}</button>\n        </li>`;\n    } else {\n      markup += `\n        <li>\n          <button class=\"favorites-pagination-button\" type=\"button\" id=\"${i}\">${i}</button>\n        </li>`;\n    }\n  }\n  mobilePagination.innerHTML = markup;\n\n  renderExerciseCards(savedInStorageExercises.slice(firstIdx, lastIdx));\n\n  mobilePagination.addEventListener('click', event => {\n    event.preventDefault();\n    if (event.target.classList.value.includes('favorites-pagination-button')) {\n      currentPage = event.target.id;\n      lastIdx = currentPage * limitPerPage;\n      firstIdx = lastIdx - limitPerPage;\n      newStorageFetch = localStorage.getItem(KEY);\n      actualExercisesList = JSON.parse(newStorageFetch);\n      renderExerciseCards(actualExercisesList.slice(firstIdx, lastIdx));\n\n      const clickedButton = event.target.closest(\n        '.favorites-pagination-button'\n      );\n      paginationButtons = document.querySelectorAll(\n        '.favorites-pagination-button'\n      );\n      paginationButtons.forEach(button => {\n        if (button.id === clickedButton.id) {\n          button.classList.add('fav-active-page');\n        } else {\n          button.classList.remove('fav-active-page');\n        }\n      });\n      window.scrollBy({\n        top: 700,\n        behavior: 'smooth',\n      });\n    }\n  });\n}\n\nexercisesGallery.addEventListener('click', event => {\n  event.preventDefault();\n  if (event.target.className === 'delete-workout-btn') {\n    newStorageFetch = localStorage.getItem(KEY);\n    actualExercisesList = JSON.parse(newStorageFetch);\n    const filteredArr = actualExercisesList.filter(\n      card => card._id !== event.target.id\n    );\n    localStorage.setItem(KEY, JSON.stringify(filteredArr));\n\n    if (filteredArr.length === 0) {\n      hideElem(exercisesGallery);\n      showElem(exercisesNotFound);\n      window.scrollBy({\n        top: 700,\n        behavior: 'smooth',\n      });\n      if (window.innerWidth < 768) {\n        hideElem(mobilePagination);\n      }\n    } else {\n      if (window.innerWidth < 768) {\n        totalPages = Math.ceil(filteredArr.length / limitPerPage);\n        markup = '';\n        for (let i = 1; i <= totalPages; i++) {\n          if (i === Number(currentPage)) {\n            markup += `\n              <li>\n                <button class=\"favorites-pagination-button fav-active-page\" type=\"button\" id=\"${i}\">${i}</button>\n              </li>`;\n          } else {\n            markup += `\n              <li>\n                <button class=\"favorites-pagination-button\" type=\"button\" id=\"${i}\">${i}</button>\n              </li>`;\n          }\n        }\n        console.log('currentPage: ', currentPage);\n        mobilePagination.innerHTML = markup;\n        lastIdx = currentPage * limitPerPage;\n        firstIdx = lastIdx - limitPerPage;\n        renderExerciseCards(filteredArr.slice(firstIdx, lastIdx));\n        window.scrollBy({\n          top: 700,\n          behavior: 'smooth',\n        });\n      } else {\n        renderExerciseCards(filteredArr);\n      }\n    }\n  }\n});\n\nexport const renderFavorites = () => {\n  savedInStorageExercises = JSON.parse(localStorage.getItem(KEY)) || {};\n  if (!savedInStorageExercises || savedInStorageExercises.length === 0) {\n    hideElem(exercisesGallery);\n  } else {\n    hideElem(exercisesNotFound);\n    renderExerciseCards(savedInStorageExercises);\n  }\n  totalPages = Math.ceil(savedInStorageExercises.length / 3);\n};\n\nfunction adjustLengthName(name) {\n  const widthScreen = document.documentElement.clientWidth;\n  let fontSize = 20;\n  let boxWidth = 295;\n  let factor = 0.7;\n  if (widthScreen > 1439) {\n    fontSize = 24;\n    boxWidth = 424;\n    factor = 0.85;\n  } else if (widthScreen > 767) {\n    fontSize = 24;\n    boxWidth = 313;\n    factor = 0.8;\n  }\n\n  const maxCharacters = (boxWidth / (fontSize / 2)) * factor;\n  if (name.length > maxCharacters) {\n    return name.slice(0, maxCharacters) + '...';\n  }\n  return name;\n}\n"],"names":["exercisesNotFound","exercisesGallery","mobilePagination","svgArrowUrl","KEY","storageFetch","savedInStorageExercises","limitPerPage","currentPage","lastIdx","firstIdx","markup","newStorageFetch","actualExercisesList","paginationButtons","totalPages","hideElem","elem","showElem","renderExerciseCards","arr","galleryItems","html","card","event","id","clickedButton","openModalWindEx","i","button","filteredArr"],"mappings":"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"}